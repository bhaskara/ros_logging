#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Bhaskara Marthi

# Search the db for actions

import roslib
roslib.load_manifest('ros_logging')
import argparse
import sys
import pymongo
import time
import ros_logging.ros_actions as act
from actionlib_msgs.msg import GoalStatus
import re
import datetime as dt

STATUSES = {GoalStatus.PENDING : 'pending',
            GoalStatus.ACTIVE: 'active',
            GoalStatus.PREEMPTED: 'preempted',
            GoalStatus.SUCCEEDED: 'succeeded',
            GoalStatus.ABORTED: 'aborted',
            GoalStatus.REJECTED: 'rejected',
            GoalStatus.PREEMPTING: 'preempting',
            GoalStatus.RECALLING: 'recalling',
            GoalStatus.RECALLED: 'recalled',
            GoalStatus.LOST: 'lost'}

DB_NAME='ros_logging'
ACTION_TYPE_COLL_NAME='action_logging_action_types'
ACTION_COLL_NAME='action_log'

def format_timestamp(stamp):
    t=dt.datetime.fromtimestamp(stamp)
    return "{0.year}-{0.month:02d}-{0.day:02d} "\
           "{0.hour:02d}:{0.minute:02d}:{0.second:02d}".\
           format(t)

def main(argv=sys.argv):
    parser = argparse.ArgumentParser(description="Filter action history")
    parser.add_argument('--action_regex', '-a', help="Regex for action name")
    parser.add_argument('--max_age', '-x', dest='max_age', type=int,
                        help="Max age in minutes of goal receipt")
    parser.add_argument('--min_age', '-m', dest='min_age', type=int,
                        help="Min age in minutes of goal receipt")

    args = parser.parse_args()
    t = time.time()
    min_time = t - 60*args.max_age if args.max_age else 0.0
    max_time = t - 60*args.min_age if args.min_age else t

    conn = pymongo.Connection()
    db = conn[DB_NAME]
    type_coll = db[ACTION_TYPE_COLL_NAME]
    action_coll = db[ACTION_COLL_NAME]
    ids = []
    classes = {}
    names = {}
    for x in type_coll.find({'name': { '$regex': args.action_regex,
                                       '$options': 'i'}}):
        ids.append(x['_id'])
        classes[x['_id']] = act.get_goal_class(x['pkg'], x['type'])
        names[x['_id']] = x['name']
        
    q = {'goal_time': {'$gte': min_time, '$lte': max_time},
         'action_id': {'$in': ids}}
    sys.stderr.write("Query: {0}\n".format(q))
    for x in action_coll.find(q):
        msg = classes[x['action_id']]()
        msg.deserialize(x['blob'])
        print("---\nAction: {0}\nGoal time: {1}\nResult time: {2}\n"\
              "Result status: {4}\n{3}".\
              format(names[x['action_id']], format_timestamp(x['goal_time']),
                     format_timestamp(x['result_time']),
                     msg, STATUSES[x['status']]))

if __name__=='__main__':
    sys.exit(main())
